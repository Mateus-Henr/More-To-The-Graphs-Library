from weighted_graph import *

g = GraphWeighted()
g.add_edge(1, 2, 26)
g.add_edge(1, 3, 13)
g.add_edge(1, 4, 28)
g.add_edge(3, 4, 19)
print("undirected graph:")
g.print_graph()
print("dfs:")
g.dfs_traversal(1)
print("bfs:")
g.bfs_traversal(1)

print("has node 3:" + str(g.has_node(3)))
print("has node 5:" + str(g.has_node(5)))
print("has edge 3,2: " + str(g.has_edge(3, 2)))
print("has edge 3,1: " + str(g.has_edge(3, 1)))
print("has path 2,3 (DFS): " + str(g.has_path_dfs(2, 3)))
print("has path 2,5 (DFS): " + str(g.has_path_dfs(2, 5)))
print("has path 2,3 (BFS): " + str(g.has_path_bfs(2, 3)))
print("has path 2,5 (BFS): " + str(g.has_path_bfs(2, 5)))

g.remove_edge(3, 4)
print("after remove edge:")
g.print_graph()
g.add_edge(3, 4, 20)
print("after add back edge:")
g.print_graph()

g.remove_node(1)
print("after remove node:")
g.print_graph()
print()
